import { Page } from 'puppeteer';

interface ExtraCol {
    colName: string;
    data: string;
    position?: number;
}
declare type GetColumnIndexType = (colName: string) => number;
declare enum RowValidationPolicy {
    NONE = "NONE",
    NON_EMPTY = "NON_EMPTY",
    EXACT_MATCH = "EXACT_MATCH"
}
declare type GroupByOptions = {
    cols: string[];
    handler?: (rows: string[][], getColumnIndex: GetColumnIndexType) => string[];
};
declare type ParserSettingsOptional = {
    temporaryColNames: string[];
    extraCols: ExtraCol[];
    withHeader: boolean;
    csvSeparator: string;
    newLine: string;
    rowValidationPolicy: RowValidationPolicy;
    groupBy: GroupByOptions;
    rowValidator: (row: string[], getColumnIndex: GetColumnIndexType, rowIndex: number, rows: Readonly<string[][]>) => boolean;
    rowTransform: (row: string[], getColumnIndex: GetColumnIndexType) => void;
    asArray: boolean;
    rowValuesAsObject: boolean;
    rowValuesAsArray: boolean;
    colFilter: (elText: string[], index: number) => string;
    colParser: (value: string, formattedIndex: number, getColumnIndex: GetColumnIndexType) => string;
    optionalColNames: string[];
    reverseTraversal: boolean;
    headerRowsSelector: string | null;
    bodyRowsSelector: string;
};
interface ParserSettings extends Partial<ParserSettingsOptional> {
    selector: string;
    readonly allowedColNames: Record<string, string>;
}
declare type FullParserSettings = Required<ParserSettings>;
declare type ExtraColsMapper = (row: string[], key: keyof ExtraCol) => string[];
interface MergeParserSettings {
    allowedColNames: FullParserSettings['allowedColNames'];
    extraCols: FullParserSettings['extraCols'];
    temporaryColNames: FullParserSettings['temporaryColNames'];
}
declare type OmitOrFalsy<T, K extends keyof T> = Omit<T, K> & {
    [key in K]?: undefined | false;
};

declare const mergeParserSettings: (to: MergeParserSettings, from: MergeParserSettings, ignoredAllowedColumns?: string[]) => MergeParserSettings;

declare class GeneralError extends Error {
}
declare class NoTablesFoundError extends GeneralError {
}
declare class InvalidSettingsError extends GeneralError {
}
declare class MissingRequiredColumnsError extends GeneralError {
}
declare class InvalidColumnError extends GeneralError {
}

declare function tableParser(page: Page, settings: Omit<ParserSettings, 'asArray'> & {
    asArray: true;
    rowValuesAsArray?: false;
    rowValuesAsObject?: false;
}): Promise<string[]>;
declare function tableParser(page: Page, settings: Omit<ParserSettings, 'asArray' | 'rowValuesAsArray'> & {
    asArray: true;
    rowValuesAsArray: true;
    rowValuesAsObject?: false;
}): Promise<string[][]>;
declare function tableParser<T extends string>(page: Page, settings: Omit<ParserSettings, 'asArray' | 'rowValuesAsArray' | 'rowValuesAsObject' | 'allowedColNames'> & {
    asArray: boolean;
    rowValuesAsObject: true;
    rowValuesAsArray?: false;
    allowedColNames: Record<string, T>;
}): Promise<Record<T, string>[]>;
declare function tableParser(page: Page, options: OmitOrFalsy<ParserSettings, 'asArray' | 'rowValuesAsObject' | 'rowValuesAsArray'>): Promise<string>;

export { ExtraCol, ExtraColsMapper, FullParserSettings, GeneralError, GetColumnIndexType, GroupByOptions, InvalidColumnError, InvalidSettingsError, MergeParserSettings, MissingRequiredColumnsError, NoTablesFoundError, OmitOrFalsy, ParserSettings, ParserSettingsOptional, RowValidationPolicy, mergeParserSettings, tableParser };
